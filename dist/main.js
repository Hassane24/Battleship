(()=>{"use strict";function e(e){const t=document.createElement("div");return t.classList.add("empty"),t.classList.add("cell"),t.setAttribute("coordinate",`${e}`),t}function t(e,t){const r={name:e,length:t,hits:[],sunken:!1},a=()=>{if(r.hits.length==r.length)return r.sunken=!0};return{getLength:()=>r.length,getName:()=>r.name,getHits:()=>r.hits,shipState:()=>r.sunken,hit:()=>{r.hits.push("hit"),a()},isSunk:a,length:t}}function r(){const e={board:Array(100).fill({hasShip:!1,isHit:!1}),fleet:[t("carrier",5),t("battleship",4),t("cruiser",3),t("submarine",3),t("destroyer",2)],locations:[]},r=t=>!t.some((t=>!e.board[t]))&&!t.some((t=>e.board[t].hasShip))&&![9,19,29,39,49,59,69,79,89].some((e=>[e,e+1].every((e=>t.includes(e)))));return{getBoard:()=>e.board,getFleet:()=>e.fleet,getShipLocations:()=>e.locations.flat(),shipPlacement:(t,r,a)=>{const n=((e,t,r)=>{const a=[];for(let n=0;n<r.getLength();n++)"horizontal"===e?a.push(t+n):a.push(t+10*n);return a})(t,r,a);for(let t=0;t<n.length;t++)e.board.splice(n[t],1,{hasShip:!0,isHit:!1,ship:a});return e.locations.push(n),n},receiveAttack:t=>{0==e.board[t].hasShip?e.board.splice(t,1,{hasShip:!1,isHit:!0,missedShot:!0}):(e.board[t].isHit=!0,e.board[t].ship.hit())},checkShipState:()=>e.board.filter((e=>e.hasShip)).map((e=>e.ship)).every((e=>e.isSunk())),checkForValidPlacement:r,randomShipPlacement:t=>{let a=[],n=(e=>{for(let n=0;n<100-t.getLength();n++){let o=[];if("horiz"===e)for(let e=0;e<t.getLength();e++)o.push(n+e);else for(let e=0;e<t.getLength();e++)o.push(n+10*e);r(o)&&a.push(o)}return a[Math.floor(Math.random()*a.length)]})(["horiz","vert"][Math.floor(2*Math.random())]);for(let r=0;r<n.length;r++)e.board.splice(n[r],1,{hasShip:!0,isHit:!1,ship:t})}}}(function(){const t=document.querySelector(".player-name"),a=document.querySelector("#name"),n=document.querySelector(".player-board > span"),o=document.querySelector(".player-name > button"),c=(document.querySelector(".board-container"),document.querySelector(".player-board > .board")),i=document.querySelector(".player-board "),l=(document.querySelector(".cpu-board > .board"),document.querySelector(".cpu-board "),document.querySelector(".container"));document.querySelector(".axis"),document.querySelector(".start");let s=function(e){let t=function(e,t){const a={name:e,board:r(),playing:!0};return{getName:()=>a.name,setName:e=>a.name=e,attackEnemy:(e,t)=>{e.receiveAttack(t)},whoIsPlaying:()=>a.playing,switchRoles:()=>a.playing=!a.playing}}(e),a=function(e){const t={name:"computer",board:r(),playing:!1,shotsFired:[]},a=()=>{let e=Math.floor(100*Math.random());return n(e,t.shotsFired)&&t.shotsFired.push(e),n(e,t.shotsFired)?e:a()},n=(e,t)=>{for(let r=0;r<t.length;r++)return e!=t[r]};return{getName:()=>t.name,attackEnemy:e=>{e.receiveAttack(a())},whoIsPlaying:()=>t.playing,switchRoles:()=>t.playing=!t.playing}}(),n=r(),o=r(),c=0;const i=()=>n.getFleet(),l=()=>o.getFleet(),s=()=>t.whoIsPlaying(),h=()=>a.whoIsPlaying(),u=()=>{s(),t.switchRoles(),a.switchRoles()};return{getPlayerFleet:i,getPlayerName:()=>t.getName(),getPlayerShipLocations:()=>n.getShipLocations(),getCPUFleet:l,placeCPUShips:()=>{const e=l();for(let t=0;t<e.length;t++)o.randomShipPlacement(e[t])},getShipToPlace:()=>i()[c],placePlayerShips:(e,t)=>{const r=i();n.shipPlacement(t,e,r[c]),c+=1},checkIfAllShipsArePlaced:()=>i().length===c,playerAttack:e=>{s()&&(t.attackEnemy(o,e),u())},cpuAttack:()=>{h()&&(a.attackEnemy(n),u())},playerWon:()=>o.checkShipState(),cpuWon:()=>n.checkShipState(),playerRole:s,cpuRole:h,switchPlayersRoles:u,isValidPlacement:e=>n.checkForValidPlacement(e)}}(a.value),h=s.getShipToPlace();const u=e=>{const t=[];for(let r=0;r<h.getLength();r++)t.push(e+r);return t};return{bindEvents:()=>{o.addEventListener("click",(()=>{if(""==a.value)return;i.classList.remove("hide"),n.textContent=a.value,(()=>{for(let t=0;t<100;t++){const r=e(t);c.appendChild(r)}})(),t.remove();const r=document.createElement("div");r.classList.add("place-ships-text"),r.textContent="Place your ships",l.appendChild(r)})),c.addEventListener("mouseout",(e=>{if(s.checkIfAllShipsArePlaced())return;const t=e.target,r=Number(t.getAttribute("coordinate"));u(r).forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.remove("hover")}))})),c.addEventListener("mouseover",(e=>{if(s.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),a=u(e);if(r=a,[9,19,29,39,49,59,69,79,89,99].some((e=>[e,e+1].every((e=>r.includes(e))))))return;a.forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.add("hover")}))}var r})),c.addEventListener("click",(e=>{if(s.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),r=u(e);if(!s.isValidPlacement(r))return;s.placePlayerShips(e,"horizontal"),s.getPlayerShipLocations().forEach((e=>{document.querySelector(`.cell.empty[coordinate="${e}"]`).classList.add("placed")})),h=s.getShipToPlace()}}))}}})().bindEvents()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,