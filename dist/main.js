(()=>{"use strict";function e(e){const t=document.createElement("div");return t.classList.add("empty"),t.classList.add("cell"),t.setAttribute("coordinate",`${e}`),t}function t(e,t){const n={name:e,length:t,hits:[],sunken:!1},o=()=>{if(n.hits.length==n.length)return n.sunken=!0};return{getLength:()=>n.length,getName:()=>n.name,getHits:()=>n.hits,shipState:()=>n.sunken,hit:()=>{n.hits.push("hit"),o()},isSunk:o}}function n(){const e={board:Array(100).fill({hasShip:!1,isHit:!1}),fleet:[t("carrier",5),t("battleship",4),t("cruiser",3),t("submarine",3),t("destroyer",2)],locations:[]},n=t=>!t.some((t=>!e.board[t]))&&!t.some((t=>e.board[t].hasShip))&&![9,19,29,39,49,59,69,79,89].some((e=>[e,e+1].every((e=>t.includes(e)))));return{getBoard:()=>e.board,getFleet:()=>e.fleet,getShipLocations:()=>e.locations.map((e=>e.location)).flat(),shipPlacement:(t,n,o)=>{const a=o.getName(),r=((e,t,n)=>{const o=[];for(let a=0;a<n.getLength();a++)"horizontal"===e?o.push(t+a):o.push(t+10*a);return o})(t,n,o);for(let t=0;t<r.length;t++)e.board.splice(r[t],1,{hasShip:!0,isHit:!1,ship:o});return e.locations.push({shipName:a,location:r}),r},receiveAttack:t=>{0==e.board[t].hasShip?e.board.splice(t,1,{hasShip:!1,isHit:!0,missedShot:!0}):(e.board[t].isHit=!0,e.board[t].ship.hit())},checkShipState:()=>e.board.filter((e=>e.hasShip)).map((e=>e.ship)).every((e=>e.isSunk())),checkForValidPlacement:n,randomShipPlacement:t=>{let o=[],a=(e=>{for(let a=0;a<100-t.getLength();a++){let r=[];if("horiz"===e)for(let e=0;e<t.getLength();e++)r.push(a+e);else for(let e=0;e<t.getLength();e++)r.push(a+10*e);n(r)&&o.push(r)}return o[Math.floor(Math.random()*o.length)]})(["horiz","vert"][Math.floor(2*Math.random())]);for(let n=0;n<a.length;n++)e.board.splice(a[n],1,{hasShip:!0,isHit:!1,ship:t})}}}(function(){const t=document.querySelector(".player-name"),o=document.querySelector("#name"),a=document.querySelector(".player-board > span"),r=document.querySelector(".player-name > button"),l=(document.querySelector(".board-container"),document.querySelector(".player-board > .board")),i=document.querySelector(".player-board "),s=(document.querySelector(".cpu-board > .board"),document.querySelector(".cpu-board "),document.querySelector(".container"));let c=function(e){let t=function(e,t){const o={name:e,board:n(),playing:!0};return{getName:()=>o.name,setName:e=>o.name=e,attackEnemy:(e,t)=>{e.receiveAttack(t)},whoIsPlaying:()=>o.playing,switchRoles:()=>o.playing=!o.playing}}(e),o=function(e){const t={name:"computer",board:n(),playing:!1,shotsFired:[]},o=()=>{let e=Math.floor(100*Math.random());return a(e,t.shotsFired)&&t.shotsFired.push(e),a(e,t.shotsFired)?e:o()},a=(e,t)=>{for(let n=0;n<t.length;n++)return e!=t[n]};return{getName:()=>t.name,attackEnemy:e=>{e.receiveAttack(o())},whoIsPlaying:()=>t.playing,switchRoles:()=>t.playing=!t.playing}}(),a=n(),r=n(),l=0;const i=()=>a.getFleet(),s=()=>r.getFleet(),c=()=>t.whoIsPlaying(),h=()=>o.whoIsPlaying(),u=()=>{c(),t.switchRoles(),o.switchRoles()};return{getPlayerFleet:i,getPlayerShipLocations:()=>a.getShipLocations(),getCPUFleet:s,placeCPUShips:()=>{const e=s();for(let t=0;t<e.length;t++)r.randomShipPlacement(e[t])},getShipToPlace:()=>i()[l],placePlayerShips:(e,t)=>{const n=i();return l+=1,a.shipPlacement(t,e,n[l])},checkIfAllShipsArePlaced:()=>i().length===l,playerAttack:e=>{c()&&(t.attackEnemy(r,e),u())},cpuAttack:()=>{h()&&(o.attackEnemy(a),u())},playerWon:()=>r.checkShipState(),cpuWon:()=>a.checkShipState(),playerRole:c,cpuRole:h,switchPlayersRoles:u,isValidPlacement:e=>{a.checkForValidPlacement(e)}}}(o.value),h=c.getShipToPlace();return{bindEvents:()=>{r.addEventListener("click",(()=>{if(""==o.value)return;i.classList.remove("hide"),a.textContent=o.value,(()=>{for(let t=0;t<100;t++){const n=e(t);l.appendChild(n)}})(),t.remove();const n=document.createElement("div");n.classList.add("place-ships-text"),n.textContent="Place your ships",s.appendChild(n)})),l.addEventListener("mouseover",(e=>{const t=(e=>{const t=[];for(let n=0;n<h.getLength();n++)t.push(e+n);return t})(e.target.getAttribute("coordinate"));console.log(t),t.forEach((e=>{const t=l.querySelector(`.empty.cell[coordinate="${e}"]`);t&&(t.style.backgroundColor="yellow")}))}))}}})().bindEvents()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,