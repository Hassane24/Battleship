(()=>{"use strict";function e(e){const t=document.createElement("div");return t.classList.add("empty"),t.classList.add("cell"),t.setAttribute("id",`${e}`),t}function t(e,t){const a={name:e,length:t,hits:[],sunken:!1},n=()=>{if(a.hits.length==a.length)return a.sunken=!0};return{getLength:()=>a.length,getName:()=>a.name,getHits:()=>a.hits,shipState:()=>a.sunken,hit:()=>{a.hits.push("hit"),n()},isSunk:n}}function a(){const e={board:Array(100).fill({hasShip:!1,isHit:!1}),fleet:[t("carrier",5),t("battleship",4),t("cruiser",3),t("submarine",3),t("destroyer",2)],locations:[]},a=t=>!t.some((t=>!e.board[t]))&&!t.some((t=>e.board[t].hasShip))&&![9,19,29,39,49,59,69,79,89].some((e=>[e,e+1].every((e=>t.includes(e)))));return{getBoard:()=>e.board,getFleet:()=>e.fleet,getShipLocations:()=>e.locations.map((e=>e.location)).flat(),shipPlacement:(t,a,n)=>{const o=n.getName(),r=((e,t,a)=>{const n=[];for(let o=0;o<a.getLength();o++)"horizontal"===e?n.push(t+o):n.push(t+10*o);return n})(t,a,n);for(let t=0;t<r.length;t++)e.board.splice(r[t],1,{hasShip:!0,isHit:!1,ship:n});return e.locations.push({shipName:o,location:r}),r},receiveAttack:t=>{0==e.board[t].hasShip?e.board.splice(t,1,{hasShip:!1,isHit:!0,missedShot:!0}):(e.board[t].isHit=!0,e.board[t].ship.hit())},checkShipState:()=>e.board.filter((e=>e.hasShip)).map((e=>e.ship)).every((e=>e.isSunk())),checkForValidPlacement:a,randomShipPlacement:t=>{let n=[],o=(e=>{for(let o=0;o<100-t.getLength();o++){let r=[];if("horiz"===e)for(let e=0;e<t.getLength();e++)r.push(o+e);else for(let e=0;e<t.getLength();e++)r.push(o+10*e);a(r)&&n.push(r)}return n[Math.floor(Math.random()*n.length)]})(["horiz","vert"][Math.floor(2*Math.random())]);for(let a=0;a<o.length;a++)e.board.splice(o[a],1,{hasShip:!0,isHit:!1,ship:t})}}}(function(){const t=document.querySelector(".player-name"),n=document.querySelector("#name"),o=document.querySelector(".player-board > span"),r=document.querySelector(".player-name > button"),i=(document.querySelector(".board-container"),document.querySelector(".player-board > .board")),l=document.querySelector(".player-board "),s=(document.querySelector(".cpu-board > .board"),document.querySelector(".cpu-board "),document.querySelector(".container"));return function(e){let t=function(e,t){const n={name:e,board:a(),playing:!0};return{getName:()=>n.name,setName:e=>n.name=e,attackEnemy:(e,t)=>{e.receiveAttack(t)},whoIsPlaying:()=>n.playing,switchRoles:()=>n.playing=!n.playing}}(e),n=function(e){const t={name:"computer",board:a(),playing:!1,shotsFired:[]},n=()=>{let e=Math.floor(100*Math.random());return o(e,t.shotsFired)&&t.shotsFired.push(e),o(e,t.shotsFired)?e:n()},o=(e,t)=>{for(let a=0;a<t.length;a++)return e!=t[a]};return{getName:()=>t.name,attackEnemy:e=>{e.receiveAttack(n())},whoIsPlaying:()=>t.playing,switchRoles:()=>t.playing=!t.playing}}(),o=a(),r=a(),i=0;const l=()=>o.getFleet(),s=()=>r.getFleet(),c=()=>t.whoIsPlaying(),h=()=>n.whoIsPlaying(),p=()=>{c(),t.switchRoles(),n.switchRoles()};return{getPlayerFleet:l,getPlayerShipLocations:()=>o.getShipLocations(),getCPUFleet:s,placeCPUShips:()=>{const e=s();for(let t=0;t<e.length;t++)r.randomShipPlacement(e[t])},getShipToPlace:()=>l()[i],placePlayerShips:(e,t)=>{const a=l();return i+=1,o.shipPlacement(t,e,a[i])},checkIfAllShipsArePlaced:()=>l().length===i,playerAttack:e=>{c()&&(t.attackEnemy(r,e),p())},cpuAttack:()=>{h()&&(n.attackEnemy(o),p())},playerWon:()=>r.checkShipState(),cpuWon:()=>o.checkShipState(),playerRole:c,cpuRole:h,switchPlayersRoles:p,isValidPlacement:e=>{o.checkForValidPlacement(e)}}}(n.value).getShipToPlace(),{bindEvents:()=>{r.addEventListener("click",(()=>{if(""==n.value)return;l.classList.remove("hide"),o.textContent=n.value,(()=>{for(let t=0;t<100;t++){const a=e(t);i.appendChild(a)}})(),t.remove();const a=document.createElement("div");a.classList.add("place-ships-text"),a.textContent="Place your ships",s.appendChild(a)}))}}})().bindEvents()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,