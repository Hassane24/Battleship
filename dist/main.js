(()=>{"use strict";function e(e){const t=document.createElement("div");return t.classList.add("empty"),t.classList.add("cell"),t.setAttribute("coordinate",`${e}`),t}function t(e,t){const s={name:e,length:t,hits:[]};return{getLength:()=>s.length,getName:()=>s.name,getHits:()=>s.hits,hit:()=>{s.hits.push("hit")},isSunk:()=>s.hits.length===s.length}}function s(){const e={board:Array(100).fill({hasShip:!1,isHit:!1}),fleet:[t("carrier",5),t("battleship",4),t("cruiser",3),t("submarine",3),t("destroyer",2)],locations:[]},s=t=>!t.some((t=>!e.board[t]))&&!t.some((t=>e.board[t].hasShip))&&![9,19,29,39,49,59,69,79,89].some((e=>[e,e+1].every((e=>t.includes(e)))));return{getBoard:()=>e.board,getFleet:()=>e.fleet,getShipLocations:()=>e.locations.flat(),shipPlacement:(t,s,r)=>{const o=((e,t,s)=>{const r=[];for(let o=0;o<s.getLength();o++)"horizontal"===e?r.push(t+o):r.push(t+10*o);return r})(t,s,r);for(let t=0;t<o.length;t++)e.board.splice(o[t],1,{hasShip:!0,isHit:!1,ship:r});return e.locations.push(o),o},receiveAttack:t=>{0==e.board[t].hasShip?e.board.splice(t,1,{hasShip:!1,isHit:!0,missedShot:!0}):(e.board[t].isHit=!0,e.board[t].ship.hit())},checkShipState:()=>e.board.filter((e=>e.hasShip)).map((e=>e.ship)).every((e=>e.isSunk())),checkForValidPlacement:s,randomShipPlacement:t=>{let r=[],o=(e=>{for(let o=0;o<100-t.getLength();o++){let a=[];if("horiz"===e)for(let e=0;e<t.getLength();e++)a.push(o+e);else for(let e=0;e<t.getLength();e++)a.push(o+10*e);s(a)&&r.push(a)}return r[Math.floor(Math.random()*r.length)]})(["horiz","vert"][Math.floor(2*Math.random())]);for(let s=0;s<o.length;s++)e.board.splice(o[s],1,{hasShip:!0,isHit:!1,ship:t});e.locations.push(o)},getHits:()=>{const t=e.board,s=[];for(let e=0;e<t.length;e++)t[e].hasShip&&t[e].isHit&&s.push(e);return s},getMisses:()=>{const t=e.board,s=[];for(let e=0;e<t.length;e++)t[e].missedShot&&s.push(e);return s}}}function r(e){let t=function(e,t){const r={name:e,board:s(),playing:!0};return{getName:()=>r.name,setName:e=>r.name=e,attackEnemy:(e,t)=>{e.receiveAttack(t)},whoIsPlaying:()=>r.playing,switchRoles:()=>r.playing=!r.playing}}(e),r=function(e){const t={name:"computer",board:s(),playing:e,shotsFired:[]},r=(e,t)=>e.some((e=>e.toString()===t.toString())),o=()=>Math.floor(100*Math.random());return{getName:()=>t.name,attackEnemy:e=>{e.receiveAttack((e=>{let t;t=o();const s=[...e.getMisses(),...e.getHits()];for(;r(s,t);)t=o();return t})(e))},whoIsPlaying:()=>t.playing,switchRoles:()=>t.playing=!t.playing}}(!1),o=s(),a=s(),c=0;const i=()=>o.getFleet(),l=()=>a.getFleet(),n=()=>t.whoIsPlaying(),h=()=>r.whoIsPlaying(),d=()=>{n(),t.switchRoles(),r.switchRoles()};return{getPlayerFleet:i,getPlayerName:()=>t.getName(),getPlayerShipLocations:()=>o.getShipLocations(),getCPUFleet:l,placeCPUShips:()=>{const e=l();for(let t=0;t<e.length;t++)a.randomShipPlacement(e[t])},getShipToPlace:()=>i()[c],placePlayerShips:(e,t)=>{const s=i();o.shipPlacement(t,e,s[c]),c+=1},checkIfAllShipsArePlaced:()=>i().length===c,playerAttack:e=>{n()&&(t.attackEnemy(a,e),d())},cpuAttack:()=>{h()&&(r.attackEnemy(o),d())},playerWon:()=>a.checkShipState(),cpuWon:()=>o.checkShipState(),playerRole:n,cpuRole:h,switchPlayersRoles:d,isValidPlacement:e=>o.checkForValidPlacement(e),getPlayerMisses:()=>a.getMisses(),getCpuMisses:()=>o.getMisses(),getPlayerHits:()=>a.getHits(),getCpuHits:()=>o.getHits()}}(function(){const t=document.querySelector(".player-name"),s=document.querySelector("#name"),o=document.querySelector(".player-board > span"),a=document.querySelector(".player-name > button"),c=(document.querySelector(".board-container"),document.querySelector(".player-board > .board")),i=document.querySelector(".player-board "),l=document.querySelector(".cpu-board > .board"),n=document.querySelector(".cpu-board "),h=document.querySelector(".container"),d=document.querySelector(".axis"),u=document.querySelector(".start");let p=r(s.value),m="horizontal",g=p.getShipToPlace();const y=e=>{const t=[];if("horizontal"===m)for(let s=0;s<g.getLength();s++)t.push(e+s);else for(let s=0;s<g.getLength();s++)t.push(e+10*s);return t},S=()=>m="horizontal"===m?"vert":"horizontal",f=()=>{document.querySelector(".place-ships-text").remove(),(()=>{for(let t=0;t<100;t++){const s=e(t);l.appendChild(s)}})(),n.classList.remove("hide"),d.classList.add("hide"),u.classList.add("hide"),l.querySelectorAll(".empty.cell").forEach((e=>e.classList.add("shoot"))),p.placeCPUShips(),c.querySelectorAll(".hover").forEach((e=>e.classList.remove("hover")))};return{bindEvents:()=>{a.addEventListener("click",(()=>{if(""==s.value)return;i.classList.remove("hide"),o.textContent=s.value,(()=>{for(let t=0;t<100;t++){const s=e(t);c.appendChild(s)}})(),t.remove();const r=document.createElement("div");r.classList.add("place-ships-text"),r.textContent="Place your ships",h.appendChild(r)})),c.addEventListener("mouseout",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target,s=Number(t.getAttribute("coordinate"));y(s).forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.remove("hover")}))})),c.addEventListener("mouseover",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),r=y(e);if(s=r,[9,19,29,39,49,59,69,79,89,99].some((e=>[e,e+1].every((e=>s.includes(e))))))return;r.forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.add("hover")}))}var s})),c.addEventListener("click",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),s=y(e);if(!p.isValidPlacement(s))return;p.placePlayerShips(e,m),p.getPlayerShipLocations().forEach((e=>{document.querySelector(`.cell.empty[coordinate="${e}"]`).classList.add("placed")})),g=p.getShipToPlace(),p.checkIfAllShipsArePlaced()&&u.classList.remove("hide")}})),d.addEventListener("click",S),u.addEventListener("click",f),l.addEventListener("click",(e=>{const t=Number(e.target.getAttribute("coordinate"));if(p.cpuWon())return h.textContent="Computer Won";if(p.playerWon())return h.textContent="You won";if(e.target.classList.contains("empty")){if(p.playerRole()){p.playerAttack(t);const e=p.getPlayerHits(),s=p.getPlayerMisses();e.forEach((e=>{const t=l.querySelector(`.cell.empty[coordinate="${e}"]`);t.classList.remove("empty"),t.classList.add("hit")})),s.forEach((e=>{const t=l.querySelector(`.cell.empty[coordinate="${e}"]`);t.classList.remove("empty"),t.classList.add("miss")}))}if(p.cpuRole()){p.cpuAttack();const e=p.getCpuHits(),t=p.getCpuMisses();e.forEach((e=>{const t=c.querySelector(`.cell.empty[coordinate="${e}"]`);t.classList.remove("placed"),t.classList.add("hit")})),t.forEach((e=>{c.querySelector(`.cell.empty[coordinate="${e}"]`).classList.add("miss")}))}}}))}}})().bindEvents()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,