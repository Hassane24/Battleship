(()=>{"use strict";function e(e){const t=document.createElement("div");return t.classList.add("empty"),t.classList.add("cell"),t.setAttribute("coordinate",`${e}`),t}function t(e,t){const r={name:e,length:t,hits:[],sunken:!1},a=()=>{if(r.hits.length==r.length)return r.sunken=!0};return{getLength:()=>r.length,getName:()=>r.name,getHits:()=>r.hits,shipState:()=>r.sunken,hit:()=>{r.hits.push("hit"),a()},isSunk:a,length:t}}function r(){const e={board:Array(100).fill({hasShip:!1,isHit:!1}),fleet:[t("carrier",5),t("battleship",4),t("cruiser",3),t("submarine",3),t("destroyer",2)],locations:[]},r=t=>!t.some((t=>!e.board[t]))&&!t.some((t=>e.board[t].hasShip))&&![9,19,29,39,49,59,69,79,89].some((e=>[e,e+1].every((e=>t.includes(e)))));return{getBoard:()=>e.board,getFleet:()=>e.fleet,getShipLocations:()=>e.locations.flat(),shipPlacement:(t,r,a)=>{const o=((e,t,r)=>{const a=[];for(let o=0;o<r.getLength();o++)"horizontal"===e?a.push(t+o):a.push(t+10*o);return a})(t,r,a);for(let t=0;t<o.length;t++)e.board.splice(o[t],1,{hasShip:!0,isHit:!1,ship:a});return e.locations.push(o),o},receiveAttack:t=>{0==e.board[t].hasShip?e.board.splice(t,1,{hasShip:!1,isHit:!0,missedShot:!0}):(e.board[t].isHit=!0,e.board[t].ship.hit())},checkShipState:()=>e.board.filter((e=>e.hasShip)).map((e=>e.ship)).every((e=>e.isSunk())),checkForValidPlacement:r,randomShipPlacement:t=>{let a=[],o=(e=>{for(let o=0;o<100-t.getLength();o++){let n=[];if("horiz"===e)for(let e=0;e<t.getLength();e++)n.push(o+e);else for(let e=0;e<t.getLength();e++)n.push(o+10*e);r(n)&&a.push(n)}return a[Math.floor(Math.random()*a.length)]})(["horiz","vert"][Math.floor(2*Math.random())]);for(let r=0;r<o.length;r++)e.board.splice(o[r],1,{hasShip:!0,isHit:!1,ship:t})}}}(function(){const t=document.querySelector(".player-name"),a=document.querySelector("#name"),o=document.querySelector(".player-board > span"),n=document.querySelector(".player-name > button"),c=(document.querySelector(".board-container"),document.querySelector(".player-board > .board")),i=document.querySelector(".player-board "),s=document.querySelector(".cpu-board > .board"),l=document.querySelector(".cpu-board "),h=document.querySelector(".container"),d=document.querySelector(".axis"),u=document.querySelector(".start");let p=function(e){let t=function(e,t){const a={name:e,board:r(),playing:!0};return{getName:()=>a.name,setName:e=>a.name=e,attackEnemy:(e,t)=>{e.receiveAttack(t)},whoIsPlaying:()=>a.playing,switchRoles:()=>a.playing=!a.playing}}(e),a=function(e){const t={name:"computer",board:r(),playing:!1,shotsFired:[]},a=()=>{let e=Math.floor(100*Math.random());return o(e,t.shotsFired)&&t.shotsFired.push(e),o(e,t.shotsFired)?e:a()},o=(e,t)=>{for(let r=0;r<t.length;r++)return e!=t[r]};return{getName:()=>t.name,attackEnemy:e=>{e.receiveAttack(a())},whoIsPlaying:()=>t.playing,switchRoles:()=>t.playing=!t.playing}}(),o=r(),n=r(),c=0;const i=()=>o.getFleet(),s=()=>n.getFleet(),l=()=>t.whoIsPlaying(),h=()=>a.whoIsPlaying(),d=()=>{l(),t.switchRoles(),a.switchRoles()};return{getPlayerFleet:i,getPlayerName:()=>t.getName(),getPlayerShipLocations:()=>o.getShipLocations(),getCPUFleet:s,placeCPUShips:()=>{const e=s();for(let t=0;t<e.length;t++)n.randomShipPlacement(e[t])},getShipToPlace:()=>i()[c],placePlayerShips:(e,t)=>{const r=i();o.shipPlacement(t,e,r[c]),c+=1},checkIfAllShipsArePlaced:()=>i().length===c,playerAttack:e=>{l()&&(t.attackEnemy(n,e),d())},cpuAttack:()=>{h()&&(a.attackEnemy(o),d())},playerWon:()=>n.checkShipState(),cpuWon:()=>o.checkShipState(),playerRole:l,cpuRole:h,switchPlayersRoles:d,isValidPlacement:e=>o.checkForValidPlacement(e)}}(a.value),m="horizontal",g=p.getShipToPlace();const y=e=>{const t=[];if("horizontal"===m)for(let r=0;r<g.getLength();r++)t.push(e+r);else for(let r=0;r<g.getLength();r++)t.push(e+10*r);return t},S=()=>m="horizontal"===m?"vert":"horizontal",f=()=>{document.querySelector(".place-ships-text").remove(),(()=>{for(let t=0;t<100;t++){const r=e(t);s.appendChild(r)}})(),l.classList.remove("hide"),d.classList.add("hide"),u.classList.add("hide")};return{bindEvents:()=>{n.addEventListener("click",(()=>{if(""==a.value)return;i.classList.remove("hide"),o.textContent=a.value,(()=>{for(let t=0;t<100;t++){const r=e(t);c.appendChild(r)}})(),t.remove();const r=document.createElement("div");r.classList.add("place-ships-text"),r.textContent="Place your ships",h.appendChild(r)})),c.addEventListener("mouseout",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target,r=Number(t.getAttribute("coordinate"));y(r).forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.remove("hover")}))})),c.addEventListener("mouseover",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),a=y(e);if(r=a,[9,19,29,39,49,59,69,79,89,99].some((e=>[e,e+1].every((e=>r.includes(e))))))return;a.forEach((e=>{const t=c.querySelector(`.empty.cell[coordinate="${e}"]`);t&&t.classList.add("hover")}))}var r})),c.addEventListener("click",(e=>{if(p.checkIfAllShipsArePlaced())return;const t=e.target;if(t.classList.contains("cell","empty")){const e=Number(t.getAttribute("coordinate")),r=y(e);if(!p.isValidPlacement(r))return;p.placePlayerShips(e,m),p.getPlayerShipLocations().forEach((e=>{document.querySelector(`.cell.empty[coordinate="${e}"]`).classList.add("placed")})),g=p.getShipToPlace(),p.checkIfAllShipsArePlaced()&&u.classList.remove("hide")}})),d.addEventListener("click",S),u.addEventListener("click",f)}}})().bindEvents()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,